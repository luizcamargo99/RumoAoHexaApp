@page "/"

<div class="main-content">
    @foreach (var sound in _sounds)
    {
        <div class="item">
            <h1>@sound.DisplayName</h1>
            <MainButton AudioName="@sound.FileName" IsActive="@sound.Active" OnClick="async()=> { await PlaySoundAsync(sound); }" />
            <audio id="@sound.FileName" src="@($"/sounds/{sound.FileName}.mp3")" class="audios" />
        </div>
    }
</div>

@code {
    private List<Sound> _sounds { get; set; } = new()
    {
        new Sound() { DisplayName = "BRASIL SIL SIL SIL (CLÁSSICO)", FileName = "brasil_sil_sil_classico",  DurationInSeconds = 13  },
        new Sound() { DisplayName = "BRASIL SIL SIL SIL (2022)", FileName = "brasil_sil_sil_2022",  DurationInSeconds = 27 },
        new Sound() { DisplayName = "ACABOU! É TETRA!! ", FileName = "e_tetra", DurationInSeconds = 10 },
    };

    private async Task PlaySoundAsync(Sound sound)
    {
        if (sound.Active)
        {
            await PauseActiveSoundAsync(sound);
            return;
        }

        var soundActive = _sounds.FirstOrDefault(x => x.Active);

        if (soundActive is not null)
            await PauseActiveSoundAsync(soundActive);

        sound.Active = !sound.Active;
        await InvokeAsync(StateHasChanged);
        await soundService.Pause();
        await soundService.Play(sound.FileName);

        var taskPlayed = Task.Delay(sound.DurationInSeconds * 1000).ContinueWith(async (x) =>
        {
            if (sound.Tasks.Count > 1)
            {
                sound.Tasks.RemoveAt(sound.Tasks.Count - 1);
                return;
            }

            sound.Active = false;
            sound.Tasks.RemoveAt(0);
            await InvokeAsync(StateHasChanged);
        });

        sound.Tasks.Add(taskPlayed);
    }

    private async Task PauseActiveSoundAsync(Sound sound)
    {
        await soundService.Pause(sound.FileName);
        sound.Active = !sound.Active;
        await InvokeAsync(StateHasChanged);
    }
}
